// @flow

declare module "http" {
	declare export type Header = string | string[];
	declare export type HeaderEntries = [string, string][];
	declare export interface HeadersObject {
		[key: string]: Header,
	}
	declare export type HeadersInit = Headers | HeaderEntries | HeadersObject;

	declare type TypedArray = Int8Array | Int16Array | Int32Array
		| Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array
		| Float32Array | Float64Array;
	declare export type Body = string | String | ArrayBuffer | TypedArray | DataView;

	declare interface RequestOptions {
		auth?: string,
		setHost?: boolean,

		client?: ClientRequestOptions,
		redirect?: Redirect,
		signal?: AbortSignal,

		headers?: HeadersInit,
		body?: Body,
	}

	declare export type RequestBuilderOptions = RequestOptions & {
		method?: string,
	};

	declare export interface ClientOptions {
		keepAlive?: boolean,
		keepAliveTimeout?: number,
		maxIdleSockets?: number,
		retryCancelled?: boolean,
	}

	declare export type ClientRequestOptions = undefined | boolean | Client;

	declare export type Redirect = "follow" | "error" | "manual";

	declare export function get(url: string, options?: RequestOptions): Promise<Response>;
	declare export function post(url: string, options?: RequestOptions): Promise<Response>;
	declare export function put(url: string, options?: RequestOptions): Promise<Response>;
	declare export function request(resource: string, method: string, options?: RequestOptions): Promise<Response>;
	declare export function request(resource: Request): Promise<Response>;

	declare export class Headers {
		constructor();
		constructor(headers: Headers);
		constructor(entries: HeaderEntries);
		constructor(object: HeadersObject);

		append(name: string, value: string);
		delete(name: string): boolean;
		get(name: string): Header | null;
		has(name: string): boolean;
		set(name: string, value: string);
	}

	declare export class Request {
		constructor(url: string, options?: RequestBuilderOptions);
		constructor(url: Request, options?: RequestBuilderOptions);
	}

	declare export class Response {
		get ok(): boolean;
		get status(): number;
		get statusText(): string;

		get bodyUsed(): boolean;
		get headers(): Headers;

		get url(): string;
		get redirected(): boolean;
		get locations(): string[];

		arrayBuffer(): Promise<ArrayBuffer>;
		text(): Promise<string>;
	}

	declare export class Client {
		constructor(options?: ClientOptions);
	}

	declare export default {
		Body,
		RequestOptions,
		RequestBuilderOptions,

		get,
		post,
		put,
		request,

		Header,
		HeaderEntries,
		HeadersObject,

		Headers,
		Request,
		Response,

		Client,
	};
}
